System.register(["./_plugin-vue_export-helper-legacy.649209c3.js","./antdv-legacy.7bd4694a.js"],(function(t,e){"use strict";var r,n,d,a,c,o,i=document.createElement("style");return i.textContent=".container[data-v-5dd20d31]{border:1px solid #ccc;height:500px;width:300px;margin:0 auto;overflow:scroll;transform:rotate(-90deg)}.article_text[data-v-5dd20d31]{transform:rotate(90deg);white-space:nowrap}\n",document.head.appendChild(i),{setters:[function(t){r=t._},function(t){n=t.k,d=t.o,a=t.A,c=t.B,o=t.q}],execute:function(){var e={},i={class:"container"},s=[function(t){return a("data-v-5dd20d31"),t=t(),c(),t}((function(){return o("div",{class:"article_text"}," 与组合式 API 时该语法是默认推荐。相比于普通的语法，它具有更多优势： 更少的样板内容，更简洁的代码。 能够使用纯 TypeScript 声明 props 和自定义事件。 更好的运行时性能 (其模板会被编译成同一作用域内的渲染函数，避免了渲染上下文代理对象)。 更好的 IDE 类型推导性能 (减少了语言服务器从代码中抽取类型的工作)。 ",-1)}))];t("default",r(e,[["render",function(t,e){return d(),n("div",i,s)}],["__scopeId","data-v-5dd20d31"]]))}}}));
